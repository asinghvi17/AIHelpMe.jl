var documenterSearchIndex = {"docs":
[{"location":"reference/","page":"Reference","title":"Reference","text":"CurrentModule = AIHelpMe","category":"page"},{"location":"reference/#Reference","page":"Reference","title":"Reference","text":"","category":"section"},{"location":"reference/","page":"Reference","title":"Reference","text":"","category":"page"},{"location":"reference/","page":"Reference","title":"Reference","text":"Modules = [AIHelpMe]","category":"page"},{"location":"reference/#AIHelpMe.aihelp-Tuple{PromptingTools.Experimental.RAGTools.AbstractChunkIndex, AbstractString}","page":"Reference","title":"AIHelpMe.aihelp","text":"aihelp([index::RAG.AbstractChunkIndex,]\n    question::AbstractString;\n    rag_template::Symbol = :RAGAnswerFromContext,\n    top_k::Int = 100, top_n::Int = 5,\n    minimum_similarity::AbstractFloat = -1.0,\n    maximum_cross_similarity::AbstractFloat = 1.0,\n    rerank_strategy::RAG.RerankingStrategy = (!isempty(PT.COHERE_API_KEY) ?\n                                              RAG.CohereRerank() : RAG.Passthrough()),\n    annotate_sources::Bool = true,\n    model_embedding::String = PT.MODEL_EMBEDDING, model_chat::String = PT.MODEL_CHAT,\n    chunks_window_margin::Tuple{Int, Int} = (1, 1),\n    return_context::Bool = false, verbose::Integer = 1,\n    rerank_kwargs::NamedTuple = NamedTuple(),\n    api_kwargs::NamedTuple = NamedTuple(),\n    kwargs...)\n\nGenerates a response for a given question using a Retrieval-Augmented Generation (RAG) approach over Julia documentation. \n\nArguments\n\nindex::AbstractChunkIndex: The chunk index (contains chunked and embedded documentation).\nquestion::AbstractString: The question to be answered.\nrag_template::Symbol: Template for the RAG model, defaults to :RAGAnswerFromContext.\ntop_k::Int: Number of top candidates to retrieve based on embedding similarity.\ntop_n::Int: Number of candidates to return after reranking. This is how many will be sent to the LLM model.\nminimum_similarity::AbstractFloat: Minimum similarity threshold (between -1 and 1) for filtering chunks based on embedding similarity. Defaults to -1.0.\nmaximum_cross_similarity::AbstractFloat: Maximum cross-similarity threshold to avoid sending duplicate documents. NOT IMPLEMENTED YET\nrerank_strategy::RerankingStrategy: Strategy for reranking the retrieved chunks. Defaults to Passthrough() or CohereRerank depending on whether COHERE_API_KEY is set.\nmodel_embedding::String: Model used for embedding the question, default is PT.MODEL_EMBEDDING.\nmodel_chat::String: Model used for generating the final response, default is PT.MODEL_CHAT.\nchunks_window_margin::Tuple{Int,Int}: The window size around each chunk to consider for context building. See ?build_context for more information.\nreturn_context::Bool: If true, returns the context used for RAG along with the response.\nreturn_all::Bool: If true, returns all messages in the conversation (helpful to continue conversation later).\nverbose::Bool: If true, enables verbose logging.\nrerank_kwargs: Reranking parameters that will be forwarded to the reranking strategy\napi_kwargs: API parameters that will be forwarded to the API calls\n\nReturns\n\nIf return_context is false, returns the generated message (msg).\nIf return_context is true, returns a tuple of the generated message (msg) and the RAG context (rag_context).\n\nNotes\n\nThe function first finds the closest chunks of documentation to the question (via embeddings).\nIt reranks the candidates and builds a \"context\" for the RAG model (ie, information to be provided to the LLM model together with the user question).\nThe chunks_window_margin allows including surrounding chunks for richer context, considering they are from the same source.\nThe function currently supports only single ChunkIndex. \nFunction always saves the last context in global LAST_CONTEXT for inspection of sources/context regardless of return_context value.\n\nExamples\n\nUsing aihelp to get a response for a question:\n\nindex = build_index(...)  # create an index that contains Makie.jl documentation\nquestion = \"How to make a barplot in Makie.jl?\"\nmsg = aihelp(index, question)\n\n# or simply\nmsg = aihelp(index; question)\n\n\n\n\n\n","category":"method"},{"location":"reference/#AIHelpMe.docdata_to_source-Tuple{AbstractDict}","page":"Reference","title":"AIHelpMe.docdata_to_source","text":"docdata_to_source(data::AbstractDict)\n\nCreates a source path from a given DocStr record\n\n\n\n\n\n","category":"method"},{"location":"reference/#AIHelpMe.docextract","page":"Reference","title":"AIHelpMe.docextract","text":"docextract(d::DocStr, sep::AbstractString = \"\n\n\")\n\nExtracts the documentation from a DocStr record. Separates the individual docs within DocStr with sep.\n\n\n\n\n\n","category":"function"},{"location":"reference/#AIHelpMe.docextract-2","page":"Reference","title":"AIHelpMe.docextract","text":"docextract(d::MultiDoc, sep::AbstractString = \"\n\n\")\n\nExtracts the documentation from a MultiDoc record (separates the individual docs within DocStr with sep)\n\n\n\n\n\n","category":"function"},{"location":"reference/#AIHelpMe.docextract-3","page":"Reference","title":"AIHelpMe.docextract","text":"docextract(modules::Vector{Module} = Base.Docs.modules)\n\nExtracts the documentation from a vector of modules.\n\n\n\n\n\n","category":"function"},{"location":"reference/#AIHelpMe.docextract-Tuple{Module}","page":"Reference","title":"AIHelpMe.docextract","text":"docextract(mod::Module)\n\nExtracts the documentation from a given (loaded) module.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AIHelpMe.find_new_chunks-Tuple{AbstractVector{<:AbstractString}, AbstractVector{<:AbstractString}}","page":"Reference","title":"AIHelpMe.find_new_chunks","text":"find_new_chunks(old_chunks::AbstractVector{<:AbstractString},\n    new_chunks::AbstractVector{<:AbstractString})\n\nIdentifies the new chunks in new_chunks that are not present in old_chunks.\n\nReturns a mask of chunks that are new (not present in old_chunks).\n\nUses SHA256 hashes to dedupe the strings quickly and effectively.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AIHelpMe.last_context-Tuple{}","page":"Reference","title":"AIHelpMe.last_context","text":"last_context()\n\nReturns the RAGContext from the last aihelp call.  It can be useful to see the sources/references used by the AI model to generate the response.\n\nIf you're using aihelp() make sure to set return_context = true to return the context.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AIHelpMe.load_index!","page":"Reference","title":"AIHelpMe.load_index!","text":"load_index!(file_path::Union{Nothing, AbstractString} = nothing;\n    verbose::Bool = true, kwargs...)\n\nLoads the serialized index in file_path into the global variable MAIN_INDEX. If not provided, it will download the latest index from the AIHelpMe.jl repository (more cost-efficient).\n\n\n\n\n\n","category":"function"},{"location":"reference/#AIHelpMe.load_index!-Tuple{PromptingTools.Experimental.RAGTools.AbstractChunkIndex}","page":"Reference","title":"AIHelpMe.load_index!","text":"load_index!(index::RAG.AbstractChunkIndex;\n    verbose::Bool = 1, kwargs...)\n\nLoads the provided index into the global variable MAIN_INDEX.\n\nIf you don't have an index yet, use build_index to build one from your currently loaded packages (see ?build_index)\n\nExample\n\n# build an index from some modules, keep empty to embed all loaded modules (eg, `build_index()`) \nindex = AIH.build_index([DataFramesMeta, DataFrames, CSV])\nAIH.load_index!(index)\n\n\n\n\n\n","category":"method"},{"location":"reference/#AIHelpMe.preview_context","page":"Reference","title":"AIHelpMe.preview_context","text":"preview_context(context = last_context())\n\nPreview the context of the last aihelp call. It will pretty-print the question, context and answer in the REPL.\n\n\n\n\n\n","category":"function"},{"location":"reference/#AIHelpMe.update_index","page":"Reference","title":"AIHelpMe.update_index","text":"update_index(index::RAG.AbstractChunkIndex = MAIN_INDEX,\n    modules::Vector{Module} = Base.Docs.modules;\n    verbose::Integer = 1,\n    separators = [\"\\n\\n\", \". \", \"\\n\"], max_length::Int = 256,\n    model::AbstractString = PT.MODEL_EMBEDDING,\n    kwargs...)\n    modules::Vector{Module} = Base.Docs.modules;\n    verbose::Bool = true, kwargs...)\n\nUpdates the provided index with the documentation of the provided modules.\n\nDeduplicates against the index.sources and embeds only the new document chunks (as measured by a hash).\n\nReturns the updated index (new instance).\n\nExample\n\nIf you loaded some new packages and want to add them to your MAIN_INDEX (or any index you use), run:\n\n# To update the MAIN_INDEX\nAHM.update_index() |> AHM.load_index!\n\n# To update an explicit index\nindex = AHM.update_index(index)\n\n\n\n\n\n","category":"function"},{"location":"reference/#PromptingTools.Experimental.RAGTools.build_index","page":"Reference","title":"PromptingTools.Experimental.RAGTools.build_index","text":"RAG.build_index(modules::Vector{Module} = Base.Docs.modules; verbose::Int = 1,\n    separators = [\"\n\n\", \". \", \" \"], max_length::Int = 256,         kwargs...)\n\nBuild index from the documentation of the currently loaded modules. If modules is empty, it will use all currently loaded modules.\n\n\n\n\n\n","category":"function"},{"location":"reference/#PromptingTools.Experimental.RAGTools.build_index-Tuple{Module}","page":"Reference","title":"PromptingTools.Experimental.RAGTools.build_index","text":"RAG.build_index(mod::Module; verbose::Int = 1, kwargs...)\n\nBuild index from the documentation of a given module mod.\n\n\n\n\n\n","category":"method"},{"location":"reference/#AIHelpMe.@aihelp!_str-Tuple{Any, Vararg{Any}}","page":"Reference","title":"AIHelpMe.@aihelp!_str","text":"aihelp!\"user_question\"[model_alias] -> AIMessage\n\nThe aihelp!\"\" string macro is used to continue a previous conversation with the AI model. \n\nIt appends the new user prompt to the last conversation in the tracked history (in AIHelpMe.CONV_HISTORY) and generates a response based on the entire conversation context. If you want to see the previous conversation, you can access it via AIHelpMe.CONV_HISTORY, which keeps at most last PromptingTools.MAX_HISTORY_LENGTH conversations.\n\nIt does NOT provide new context from the documentation. To do that, start a new conversation with aihelp\"<question>\".\n\nArguments\n\nuser_question (String): The follow up question to be added to the existing conversation.\nmodel_alias (optional, any): Specify the model alias of the AI model to be used (see PT.MODEL_ALIASES). If not provided, the default model is used.\n\nReturns\n\nAIMessage corresponding to the new user prompt, considering the entire conversation history.\n\nExample\n\nTo continue a conversation:\n\n# start conversation as normal\naihelp\"How to create a dictionary?\" \n\n# ... wait for reply and then react to it:\n\n# continue the conversation (notice that you can change the model, eg, to more powerful one for better answer)\naihelp!\"Can you create it from named tuple?\"gpt4t\n# AIMessage(\"Yes, you can create a dictionary from a named tuple ...\")\n\nUsage Notes\n\nThis macro should be used when you want to maintain the context of an ongoing conversation (ie, the last ai\"\" message).\nIt automatically accesses and updates the global conversation history.\nIf no conversation history is found, it raises an assertion error, suggesting to initiate a new conversation using ai\"\" instead.\n\nImportant\n\nEnsure that the conversation history is not too long to maintain relevancy and coherence in the AI's responses. The history length is managed by MAX_HISTORY_LENGTH.\n\n\n\n\n\n","category":"macro"},{"location":"reference/#AIHelpMe.@aihelp_str-Tuple{Any, Vararg{Any}}","page":"Reference","title":"AIHelpMe.@aihelp_str","text":"aihelp\"user_question\"[model_alias] -> AIMessage\n\nThe aihelp\"\" string macro generates an AI response to a given user question by using aihelp under the hood. It will automatically try to provide the most relevant bits of the documentation (from the index) to the LLM to answer the question.\n\nSee also aihelp!\"\" if you want to reply to the provided message / continue the conversation.\n\nArguments\n\nuser_question (String): The question to be answered by the AI model.\nmodel_alias (optional, any): Provide model alias of the AI model (see MODEL_ALIASES).\n\nReturns\n\nAIMessage corresponding to the input prompt.\n\nExample\n\nresult = aihelp\"Hello, how are you?\"\n# AIMessage(\"Hello! I'm an AI assistant, so I don't have feelings, but I'm here to help you. How can I assist you today?\")\n\nIf you want to interpolate some variables or additional context, simply use string interpolation:\n\na=1\nresult = aihelp\"What is `$a+$a`?\"\n# AIMessage(\"The sum of `1+1` is `2`.\")\n\nIf you want to use a different model, eg, GPT-4, you can provide its alias as a flag:\n\nresult = aihelp\"What is `1.23 * 100 + 1`?\"gpt4t\n# AIMessage(\"The answer is 124.\")\n\n\n\n\n\n","category":"macro"},{"location":"","page":"Home","title":"Home","text":"CurrentModule = AIHelpMe","category":"page"},{"location":"#AIHelpMe:-\"AI-Enhanced-Coding-Assistance-for-Julia\"","page":"Home","title":"AIHelpMe: \"AI-Enhanced Coding Assistance for Julia\"","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AIHelpMe.","category":"page"},{"location":"","page":"Home","title":"Home","text":"AIHelpMe harnesses the power of Julia's extensive documentation and advanced AI models to provide tailored coding guidance. By integrating with PromptingTools.jl, it offers a unique, AI-assisted approach to answering your coding queries directly in Julia's environment.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: This is only a proof-of-concept. If there is enough interest, we will fine-tune the RAG pipeline for better performance.","category":"page"},{"location":"#Features","page":"Home","title":"Features","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AI-Powered Assistance: Get context-aware answers to your coding questions.\nEasy-to-Use Interface: Simple function and macro to input your questions.\nFlexible Querying: Use different AI models for varied insights and performance versus cost trade-offs.\nCost-Effective: Download pre-embedded documentation to save on API calls.\nUniquely Tailored: Leverage the currently loaded documentation, regardless of whether it's private or public.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install AIHelpMe, use the Julia package manager and the address of the repository (it's not yet registered):","category":"page"},{"location":"","page":"Home","title":"Home","text":"using Pkg\nPkg.add(\"https://github.com/svilupp/AIHelpMe.jl\")","category":"page"},{"location":"","page":"Home","title":"Home","text":"Prerequisites:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Julia (version 1.10 or later).\nInternet connection for API access.\nOpenAI and Cohere API keys (recommended for optimal performance). See How to Obtain API Keys.","category":"page"},{"location":"","page":"Home","title":"Home","text":"All setup should take less than 5 minutes!","category":"page"},{"location":"#Quick-Start-Guide","page":"Home","title":"Quick Start Guide","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Basic Usage:\nusing AIHelpMe\naihelp(\"How do I implement quicksort in Julia?\")\n ```\n\n ```plaintext\n[ Info: Done generating response. Total cost: $0.001\nAIMessage(\"To implement quicksort in Julia, you can use the `sort` function with the `alg=QuickSort` argument.\")\naihelp Macro:\naihelp\"how to implement quicksort in Julia?\"\nFollow-up Questions:\naihelp!\"Can you elaborate on the `sort` function?\"\nNote: The ! is required for follow-up questions. aihelp! does not add new context/more information - to do that, you need to ask a new question.\nPick stronger models:  Eg, \"gpt4t\" is an alias for GPT-4 Turbo:  julia  aihelp\"Elaborate on the `sort` function and quicksort algorithm\"gpt4t  plaintext  [ Info: Done generating response. Total cost: $0.002 -->  AIMessage(\"The `sort` function in programming languages, including Julia.... continues for a while!\nDebugging: How did you come up with that answer? Check the \"context\" provided to the AI model (ie, the documentation snippets that were used to generate the answer):  ```julia  const AHM = AIHelpMe  AHM.preview_context()\nOutput: Pretty-printed Question + Context + Answer with color highlights\n```","category":"page"},{"location":"#How-to-Obtain-API-Keys","page":"Home","title":"How to Obtain API Keys","text":"","category":"section"},{"location":"#OpenAI-API-Key:","page":"Home","title":"OpenAI API Key:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Visit OpenAI's API portal.\nSign up and generate an API Key.\nSet it as an environment variable or a local preference in PromptingTools.jl. See the instructions.","category":"page"},{"location":"#Cohere-API-Key:","page":"Home","title":"Cohere API Key:","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Sign up at Cohere's registration page.\nAfter registering, visit the API keys section to obtain a free, rate-limited Trial key.\nSet it as an environment variable or a local preference in PromptingTools.jl. See the instructions.","category":"page"},{"location":"#Usage","page":"Home","title":"Usage","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Formulating Questions:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Be clear and specific for the best results. Do mention the programming language (eg, Julia) and the topic (eg, \"quicksort\") when it's not obvious from the context.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Example Queries:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Simple question: aihelp\"What is a DataFrame in Julia?\"\nUsing a model: aihelp\"best practices for error handling in Julia\"gpt4t\nFollow-up: aihelp!\"Could you provide an example?\"\nDebug errors (use err REPL variable):","category":"page"},{"location":"","page":"Home","title":"Home","text":"## define mock function to trigger method error\nf(x::Int) = x^2\nf(Int8(2))\n# we get: ERROR: MethodError: no method matching f(::Int8)\n\n# Help is here:\naihelp\"What does this error mean? $err\" # Note the $err to interpolate the stacktrace","category":"page"},{"location":"","page":"Home","title":"Home","text":"[ Info: Done generating response. Total cost: $0.003\n\nAIMessage(\"The error message \"MethodError: no method matching f(::Int8)\" means that there is no method defined for function `f` that accepts an argument of type `Int8`. The error message also provides the closest candidate methods that were found, which are `f(::Any, !Matched::Any)` and `f(!Matched::Int64)` in the specified file `embed_all.jl` at lines 45 and 61, respectively.\")","category":"page"},{"location":"#Extending-the-Knowledge-Base","page":"Home","title":"Extending the Knowledge Base","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The package by default ships with pre-processed embeddings for all Julia standard libraries, DataFrames and PromptingTools. Thanks to the amazing Julia Artifacts system, these embeddings are downloaded/cached/loaded every time the package starts.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Note: The below functions are not yet exported. Prefix them with AIHelpMe. to use them.","category":"page"},{"location":"#Building-and-Updating-Indexes","page":"Home","title":"Building and Updating Indexes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AIHelpMe allows users to enhance its capabilities by embedding documentation from any loaded Julia module.  Utilize new_index = build_index(module) to create an index for a specific module (or a vector of modules). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To update an existing index, including newly imported packages, use new index = update_index(module) or simply update_index() to include all unrecognized modules. We will add and embed only the new documentation to avoid unnecessary duplication and cost.","category":"page"},{"location":"#Managing-Indexes","page":"Home","title":"Managing Indexes","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Once an index is built or updated, you can choose to serialize it for later use or set it as the primary index. ","category":"page"},{"location":"","page":"Home","title":"Home","text":"To use your newly created index as the main source for queries, execute load_index!(new_index). Alternatively, load a pre-existing index from a file using load_index!(file_path). ","category":"page"},{"location":"","page":"Home","title":"Home","text":"The main index for queries is held in the global variable AIHelpMe.MAIN_INDEX.","category":"page"},{"location":"#How-it-works","page":"Home","title":"How it works","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AIHelpMe leverages PromptingTools.jl to communicate with the AI models.","category":"page"},{"location":"","page":"Home","title":"Home","text":"We apply a Retrieval Augment Generation (RAG) pattern, ie, ","category":"page"},{"location":"","page":"Home","title":"Home","text":"we pre-process all available documentation (and \"embed it\" to convert text snippets into numbers)\nwhen a question is asked, we look up the most relevant documentation snippets\nwe feed the question and the documentation snippets to the AI model\nthe AI model generates the answer","category":"page"},{"location":"","page":"Home","title":"Home","text":"This ensures that the answers are not only based on general AI knowledge but are also specifically tailored to Julia's ecosystem and best practices.","category":"page"},{"location":"#Future-Directions","page":"Home","title":"Future Directions","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"AIHelpMe is continuously evolving. Future updates may include:","category":"page"},{"location":"","page":"Home","title":"Home","text":"Tools to trace the provenance of answers (ie, where did the answer come from?).\nCreation of a gold standard Q&A dataset for evaluation.\nRefinement of the RAG ingestion pipeline for optimized chunk processing and deduplication.\nIntroduction of context filtering to focus on specific modules.\nTransition to a more sophisticated multi-turn conversation design.\nEnhancement of the marginal information provided by the RAG context.\nExpansion of content sources beyond docstrings, potentially including documentation sites and community resources like Discourse or Slack posts.","category":"page"},{"location":"","page":"Home","title":"Home","text":"Please note that this is merely a pre-release to gauge the interest in this project.","category":"page"},{"location":"faq/#Frequently-Asked-Questions","page":"F.A.Q","title":"Frequently Asked Questions","text":"","category":"section"},{"location":"faq/","page":"F.A.Q","title":"F.A.Q","text":"Q: Is it expensive to embed all my documentation? A: No, embedding a comprehensive set of documentation is surprisingly cost-effective. Embedding around 170 modules, including all standard libraries and more, costs approximately 8 cents and takes less than 30 seconds.  To save you money, we have already embedded the Julia standard libraries and made them available for download via Artifacts.  We expect that any further knowledge base extensions should be at most a few cents (see Extending the Knowledge Base).","category":"page"},{"location":"faq/","page":"F.A.Q","title":"F.A.Q","text":"Q: How much does it cost to ask a question? A: Each query incurs only a fraction of a cent, depending on the length and chosen model.","category":"page"},{"location":"faq/","page":"F.A.Q","title":"F.A.Q","text":"Q: How accurate are the answers? A: Like any other Generative AI answers, ie, it depends and you should always double-check.","category":"page"},{"location":"faq/","page":"F.A.Q","title":"F.A.Q","text":"Q: Can I use it without the internet? A: Not at the moment. It might be possible in the future, as PromptingTools.jl supports local LLMs.","category":"page"},{"location":"faq/","page":"F.A.Q","title":"F.A.Q","text":"Q: Why do we need Cohere API Key? A: Cohere's API is used to re-rank the best matching snippets from the documentation. It's free to use in limited quantities (ie, ~thousand requests per month), which should be enough for most users. Re-ranking improves the quality and accuracy of the answers.","category":"page"}]
}
